// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/apiclient/sensor/sensor.proto

// Sensor Service
//
// Sensor Service API performs CRUD actions against sensor status

package sensor

import (
	context "context"
	fmt "fmt"
	v1alpha1 "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	_ "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SensorStatusGetRequest struct {
	Name                 string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string         `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	GetOptions           *v1.GetOptions `protobuf:"bytes,3,opt,name=getOptions,proto3" json:"getOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SensorStatusGetRequest) Reset()         { *m = SensorStatusGetRequest{} }
func (m *SensorStatusGetRequest) String() string { return proto.CompactTextString(m) }
func (*SensorStatusGetRequest) ProtoMessage()    {}
func (*SensorStatusGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78ba963e1c6b5b55, []int{0}
}
func (m *SensorStatusGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SensorStatusGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SensorStatusGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SensorStatusGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorStatusGetRequest.Merge(m, src)
}
func (m *SensorStatusGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *SensorStatusGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorStatusGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SensorStatusGetRequest proto.InternalMessageInfo

func (m *SensorStatusGetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SensorStatusGetRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SensorStatusGetRequest) GetGetOptions() *v1.GetOptions {
	if m != nil {
		return m.GetOptions
	}
	return nil
}

type SensorStatusUpdateRequest struct {
	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Status               *v1alpha1.SensorStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SensorStatusUpdateRequest) Reset()         { *m = SensorStatusUpdateRequest{} }
func (m *SensorStatusUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*SensorStatusUpdateRequest) ProtoMessage()    {}
func (*SensorStatusUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78ba963e1c6b5b55, []int{1}
}
func (m *SensorStatusUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SensorStatusUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SensorStatusUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SensorStatusUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorStatusUpdateRequest.Merge(m, src)
}
func (m *SensorStatusUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *SensorStatusUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorStatusUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SensorStatusUpdateRequest proto.InternalMessageInfo

func (m *SensorStatusUpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SensorStatusUpdateRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SensorStatusUpdateRequest) GetStatus() *v1alpha1.SensorStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*SensorStatusGetRequest)(nil), "sensor.SensorStatusGetRequest")
	proto.RegisterType((*SensorStatusUpdateRequest)(nil), "sensor.SensorStatusUpdateRequest")
}

func init() { proto.RegisterFile("pkg/apiclient/sensor/sensor.proto", fileDescriptor_78ba963e1c6b5b55) }

var fileDescriptor_78ba963e1c6b5b55 = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xb1, 0xae, 0xd3, 0x30,
	0x14, 0x86, 0xe5, 0x82, 0x2a, 0x5d, 0x23, 0x84, 0xe4, 0x01, 0x95, 0xe8, 0x2a, 0xba, 0x37, 0xd3,
	0x05, 0x74, 0x6d, 0x72, 0xe9, 0x80, 0x18, 0x3b, 0x50, 0x36, 0x50, 0x2a, 0x16, 0x06, 0x90, 0x9b,
	0x1e, 0xdc, 0xd0, 0xc6, 0x36, 0xb1, 0x13, 0x09, 0xa1, 0x2e, 0xbc, 0x02, 0x2b, 0x8f, 0x00, 0x23,
	0xef, 0xc0, 0x88, 0xc4, 0x0b, 0xa0, 0x8a, 0x67, 0x60, 0x46, 0x71, 0xdc, 0x26, 0x15, 0x1d, 0x2a,
	0xd4, 0xc9, 0xc7, 0x3e, 0x3d, 0xff, 0xf9, 0xfc, 0xf7, 0x38, 0xf8, 0x5c, 0x2f, 0x04, 0xe3, 0x3a,
	0x4b, 0x97, 0x19, 0x48, 0xcb, 0x0c, 0x48, 0xa3, 0x0a, 0xbf, 0x50, 0x5d, 0x28, 0xab, 0x48, 0xbf,
	0xd9, 0x05, 0x97, 0x22, 0xb3, 0xf3, 0x72, 0x4a, 0x53, 0x95, 0x33, 0xa1, 0x84, 0x62, 0x2e, 0x3d,
	0x2d, 0xdf, 0xb8, 0x9d, 0xdb, 0xb8, 0xa8, 0x29, 0x0b, 0x4e, 0x85, 0x52, 0x62, 0x09, 0xb5, 0x38,
	0xe3, 0x52, 0x2a, 0xcb, 0x6d, 0xa6, 0xa4, 0xf1, 0xd9, 0xe1, 0xe2, 0x91, 0xa1, 0x99, 0xaa, 0xb3,
	0x39, 0x4f, 0xe7, 0x99, 0x84, 0xe2, 0x3d, 0xf3, 0x2c, 0x86, 0xe5, 0x60, 0x39, 0xab, 0x62, 0x26,
	0x40, 0x42, 0xc1, 0x2d, 0xcc, 0x7c, 0xd5, 0xd3, 0x0e, 0x02, 0x2f, 0x5c, 0xd3, 0xb7, 0x2e, 0xb8,
	0x84, 0x0a, 0xa4, 0x35, 0xad, 0x82, 0xbf, 0x48, 0x15, 0xf3, 0xa5, 0x9e, 0xf3, 0x7f, 0x95, 0xa2,
	0xb6, 0x3f, 0x4b, 0x55, 0x01, 0x7b, 0xba, 0x45, 0x9f, 0x11, 0xbe, 0x3d, 0x71, 0x3a, 0x13, 0xcb,
	0x6d, 0x69, 0xc6, 0x60, 0x13, 0x78, 0x57, 0x82, 0xb1, 0x84, 0xe0, 0xeb, 0x92, 0xe7, 0x30, 0x40,
	0x67, 0xe8, 0xe2, 0x24, 0x71, 0x31, 0x39, 0xc5, 0x27, 0xf5, 0x6a, 0x34, 0x4f, 0x61, 0xd0, 0x73,
	0x89, 0xf6, 0x80, 0x3c, 0xc7, 0x58, 0x80, 0x7d, 0xa6, 0x9d, 0x09, 0x83, 0x6b, 0x67, 0xe8, 0xe2,
	0xc6, 0xd5, 0x03, 0xda, 0x50, 0xd0, 0xae, 0x0b, 0x54, 0x2f, 0x44, 0x7d, 0x60, 0x68, 0xed, 0x02,
	0xad, 0x62, 0x3a, 0xde, 0xd6, 0x25, 0x1d, 0x8d, 0xe8, 0x2b, 0xc2, 0x77, 0xba, 0x78, 0x2f, 0xf4,
	0x8c, 0x5b, 0xf8, 0x7f, 0xc2, 0x57, 0xb8, 0x6f, 0x9c, 0x90, 0xa7, 0x7b, 0x42, 0x5b, 0xb7, 0xe9,
	0xc6, 0x6d, 0x17, 0xbc, 0x6e, 0xdc, 0x6e, 0x49, 0xfd, 0xbc, 0x6c, 0xdc, 0xa6, 0x5d, 0xac, 0xc4,
	0xab, 0x5e, 0xfd, 0xe9, 0xe1, 0x9b, 0x3e, 0x01, 0x45, 0x95, 0xa5, 0x40, 0xbe, 0x20, 0x7c, 0x6b,
	0x0c, 0xb6, 0xfb, 0x6b, 0x12, 0x6e, 0xc4, 0xf6, 0x3b, 0x1f, 0x1c, 0x89, 0x2a, 0x8a, 0x3f, 0xfe,
	0xfc, 0xfd, 0xa9, 0x77, 0x9f, 0xdc, 0x75, 0x23, 0x50, 0xc5, 0x7e, 0x62, 0x0c, 0xfb, 0xb0, 0x75,
	0x64, 0xd5, 0xc4, 0x2b, 0xd6, 0x5c, 0x80, 0x7c, 0x43, 0x98, 0x34, 0x26, 0xef, 0x10, 0x9f, 0xef,
	0x23, 0xde, 0xf9, 0x33, 0x8e, 0x06, 0x3d, 0x74, 0xd0, 0x34, 0x38, 0x1c, 0xfa, 0x31, 0xba, 0x37,
	0x1a, 0x7d, 0x5f, 0x87, 0xe8, 0xc7, 0x3a, 0x44, 0xbf, 0xd6, 0x21, 0x7a, 0x39, 0x3c, 0xf0, 0x0d,
	0xed, 0x7c, 0x11, 0xa6, 0x7d, 0xf7, 0x24, 0x1e, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x96,
	0x2b, 0xa2, 0x30, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SensorServiceClient is the client API for SensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SensorServiceClient interface {
	GetSensorStatus(ctx context.Context, in *SensorStatusGetRequest, opts ...grpc.CallOption) (*v1alpha1.SensorStatus, error)
	UpdateSensorStatus(ctx context.Context, in *SensorStatusUpdateRequest, opts ...grpc.CallOption) (*v1alpha1.SensorStatus, error)
}

type sensorServiceClient struct {
	cc *grpc.ClientConn
}

func NewSensorServiceClient(cc *grpc.ClientConn) SensorServiceClient {
	return &sensorServiceClient{cc}
}

func (c *sensorServiceClient) GetSensorStatus(ctx context.Context, in *SensorStatusGetRequest, opts ...grpc.CallOption) (*v1alpha1.SensorStatus, error) {
	out := new(v1alpha1.SensorStatus)
	err := c.cc.Invoke(ctx, "/sensor.SensorService/GetSensorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorServiceClient) UpdateSensorStatus(ctx context.Context, in *SensorStatusUpdateRequest, opts ...grpc.CallOption) (*v1alpha1.SensorStatus, error) {
	out := new(v1alpha1.SensorStatus)
	err := c.cc.Invoke(ctx, "/sensor.SensorService/UpdateSensorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorServiceServer is the server API for SensorService service.
type SensorServiceServer interface {
	GetSensorStatus(context.Context, *SensorStatusGetRequest) (*v1alpha1.SensorStatus, error)
	UpdateSensorStatus(context.Context, *SensorStatusUpdateRequest) (*v1alpha1.SensorStatus, error)
}

// UnimplementedSensorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSensorServiceServer struct {
}

func (*UnimplementedSensorServiceServer) GetSensorStatus(ctx context.Context, req *SensorStatusGetRequest) (*v1alpha1.SensorStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensorStatus not implemented")
}
func (*UnimplementedSensorServiceServer) UpdateSensorStatus(ctx context.Context, req *SensorStatusUpdateRequest) (*v1alpha1.SensorStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSensorStatus not implemented")
}

func RegisterSensorServiceServer(s *grpc.Server, srv SensorServiceServer) {
	s.RegisterService(&_SensorService_serviceDesc, srv)
}

func _SensorService_GetSensorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorStatusGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServiceServer).GetSensorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensor.SensorService/GetSensorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServiceServer).GetSensorStatus(ctx, req.(*SensorStatusGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorService_UpdateSensorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorStatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServiceServer).UpdateSensorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensor.SensorService/UpdateSensorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServiceServer).UpdateSensorStatus(ctx, req.(*SensorStatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SensorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sensor.SensorService",
	HandlerType: (*SensorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSensorStatus",
			Handler:    _SensorService_GetSensorStatus_Handler,
		},
		{
			MethodName: "UpdateSensorStatus",
			Handler:    _SensorService_UpdateSensorStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apiclient/sensor/sensor.proto",
}

func (m *SensorStatusGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SensorStatusGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensorStatusGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GetOptions != nil {
		{
			size, err := m.GetOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SensorStatusUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SensorStatusUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensorStatusUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSensor(dAtA []byte, offset int, v uint64) int {
	offset -= sovSensor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SensorStatusGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	if m.GetOptions != nil {
		l = m.GetOptions.Size()
		n += 1 + l + sovSensor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SensorStatusUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSensor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSensor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSensor(x uint64) (n int) {
	return sovSensor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SensorStatusGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SensorStatusGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SensorStatusGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetOptions == nil {
				m.GetOptions = &v1.GetOptions{}
			}
			if err := m.GetOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSensor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSensor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SensorStatusUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SensorStatusUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SensorStatusUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &v1alpha1.SensorStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSensor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSensor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSensor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSensor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSensor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSensor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSensor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSensor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSensor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSensor = fmt.Errorf("proto: unexpected end of group")
)
